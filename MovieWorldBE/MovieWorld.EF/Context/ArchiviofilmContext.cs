// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using MovieWorld.EF.Models;


#nullable disable

namespace MovieWorld.EF.Context
{
    public partial class ArchiviofilmContext : DbContext
    {
        public ArchiviofilmContext()
        {
        }

        public ArchiviofilmContext(DbContextOptions<ArchiviofilmContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Admin> Admin { get; set; }
        public virtual DbSet<Buy> Buy { get; set; }
        public virtual DbSet<Cast> Cast { get; set; }
        public virtual DbSet<DeliveryPoint> DeliveryPoint { get; set; }
        public virtual DbSet<Email> Email { get; set; }
        public virtual DbSet<Film> Film { get; set; }
        public virtual DbSet<FilmGenre> FilmGenre { get; set; }
        public virtual DbSet<FilmLabel> FilmLabel { get; set; }
        public virtual DbSet<Genre> Genre { get; set; }
        public virtual DbSet<Label> Label { get; set; }
        public virtual DbSet<Multilingual> Multilingual { get; set; }
        public virtual DbSet<News> News { get; set; }
        public virtual DbSet<NewsLabel> NewsLabel { get; set; }
        public virtual DbSet<Order> Order { get; set; }
        public virtual DbSet<Realize> Realize { get; set; }
        public virtual DbSet<RoleOfCast> RoleOfCast { get; set; }
        public virtual DbSet<Store> Store { get; set; }
        public virtual DbSet<User> User { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Latin1_General_CI_AS");

            modelBuilder.Entity<Admin>(entity =>
            {
                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Email).HasColumnName("email");

                entity.Property(e => e.Password).HasColumnName("password");

                entity.Property(e => e.Username).HasColumnName("username");
            });

            modelBuilder.Entity<Buy>(entity =>
            {
                entity.HasKey(e => new { e.FilmId, e.StoreId })
                    .HasName("PK_Vende");

                entity.Property(e => e.FilmId).HasColumnName("FilmID");

                entity.Property(e => e.StoreId).HasColumnName("StoreID");

                entity.HasOne(d => d.Film)
                    .WithMany(p => p.Buy)
                    .HasForeignKey(d => d.FilmId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Buy_Film");

                entity.HasOne(d => d.Store)
                    .WithMany(p => p.Buy)
                    .HasForeignKey(d => d.StoreId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Buy_Store");
            });

            modelBuilder.Entity<Cast>(entity =>
            {
                entity.HasKey(e => e.ActorsDirectorId)
                    .HasName("PK_ActorDirector");

                entity.Property(e => e.ActorsDirectorId)
                    .ValueGeneratedNever()
                    .HasColumnName("ActorsDirectorID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Surname)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.IdRoleNavigation)
                    .WithMany(p => p.Cast)
                    .HasForeignKey(d => d.IdRole)
                    .HasConstraintName("FK_Cast_RoleOfCast");
            });

            modelBuilder.Entity<DeliveryPoint>(entity =>
            {
                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Address).IsRequired();

                entity.Property(e => e.Province)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Email>(entity =>
            {
                entity.HasKey(e => e.IdEmail);

                entity.Property(e => e.IdEmail).ValueGeneratedNever();

                entity.Property(e => e.Body).IsRequired();

                entity.Property(e => e.Keyword).IsRequired();

                entity.Property(e => e.Object).IsRequired();

                entity.Property(e => e.Title).IsRequired();
            });

            modelBuilder.Entity<Film>(entity =>
            {
                entity.Property(e => e.FilmId)
                    .ValueGeneratedNever()
                    .HasColumnName("FilmID");

                entity.Property(e => e.Bgimage).HasColumnName("BGImage");

                entity.Property(e => e.Format)
                    .IsRequired()
                    .HasMaxLength(6);
            });

            modelBuilder.Entity<FilmGenre>(entity =>
            {
                entity.HasKey(e => new { e.IdFilm, e.IdGenre });

                entity.HasOne(d => d.IdFilmNavigation)
                    .WithMany(p => p.FilmGenre)
                    .HasForeignKey(d => d.IdFilm)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FilmGenre_Film");

                entity.HasOne(d => d.IdGenreNavigation)
                    .WithMany(p => p.FilmGenre)
                    .HasForeignKey(d => d.IdGenre)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FilmGenre_Genre");
            });

            modelBuilder.Entity<FilmLabel>(entity =>
            {
                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ShortPlot)
                    .IsRequired()
                    .HasMaxLength(800);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.IdMultilingualNavigation)
                    .WithMany(p => p.FilmLabel)
                    .HasForeignKey(d => d.IdMultilingual)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FilmLabel_Multilingual");
            });

            modelBuilder.Entity<Genre>(entity =>
            {
                entity.HasKey(e => e.IdGenre)
                    .HasName("PK_MovieGenre");

                entity.Property(e => e.IdGenre).ValueGeneratedNever();

                entity.Property(e => e.Color)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.Genre1)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("Genre");
            });

            modelBuilder.Entity<Label>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Key)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("key");

                entity.Property(e => e.LabelContent)
                    .IsRequired()
                    .HasColumnName("labelContent");

                entity.HasOne(d => d.IdMultilingualNavigation)
                    .WithMany(p => p.Label)
                    .HasForeignKey(d => d.IdMultilingual)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Label_Multilingual");
            });

            modelBuilder.Entity<Multilingual>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Img)
                    .IsRequired()
                    .HasColumnName("img");

                entity.Property(e => e.Language)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<News>(entity =>
            {
                entity.Property(e => e.NewsId)
                    .ValueGeneratedNever()
                    .HasColumnName("NewsID");

                entity.Property(e => e.PublicationDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<NewsLabel>(entity =>
            {
                entity.HasKey(e => new { e.IdNews, e.Idmultilingual });

                entity.Property(e => e.Idmultilingual).HasColumnName("IDMultilingual");

                entity.Property(e => e.SubTitle).HasMaxLength(50);

                entity.Property(e => e.Text).IsRequired();

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.IdNewsNavigation)
                    .WithMany(p => p.NewsLabel)
                    .HasForeignKey(d => d.IdNews)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NewsLabel_News");

                entity.HasOne(d => d.IdmultilingualNavigation)
                    .WithMany(p => p.NewsLabel)
                    .HasForeignKey(d => d.Idmultilingual)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NewsLabel_Multilingual");
            });

            modelBuilder.Entity<Order>(entity =>
            {
                entity.Property(e => e.OrderId)
                    .ValueGeneratedNever()
                    .HasColumnName("OrderID");

                entity.Property(e => e.FilmId).HasColumnName("FilmID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.Film)
                    .WithMany(p => p.Order)
                    .HasForeignKey(d => d.FilmId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_Film");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Order)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_User");
            });

            modelBuilder.Entity<Realize>(entity =>
            {
                entity.HasKey(e => new { e.ActorMovieDirectorId, e.FilmId });

                entity.Property(e => e.ActorMovieDirectorId).HasColumnName("ActorMovieDirectorID");

                entity.Property(e => e.FilmId).HasColumnName("FilmID");

                entity.HasOne(d => d.ActorMovieDirector)
                    .WithMany(p => p.Realize)
                    .HasForeignKey(d => d.ActorMovieDirectorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Realize_ActorDirector");

                entity.HasOne(d => d.Film)
                    .WithMany(p => p.Realize)
                    .HasForeignKey(d => d.FilmId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Realize_Film");
            });

            modelBuilder.Entity<RoleOfCast>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Role)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Store>(entity =>
            {
                entity.Property(e => e.StoreId)
                    .ValueGeneratedNever()
                    .HasColumnName("StoreID");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Cap)
                    .IsRequired()
                    .HasMaxLength(5)
                    .HasColumnName("CAP")
                    .IsFixedLength(true);

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Province)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.Property(e => e.UserId)
                    .ValueGeneratedNever()
                    .HasColumnName("UserID");

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Password).HasMaxLength(16);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}